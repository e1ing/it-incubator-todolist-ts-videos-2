{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","initialState","status","error","setErrorAC","type","setStatusAC","updateTaskTC","domainModel","dispatch","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","action","updateTaskAC","console","warn","AddItemForm","React","memo","disabled","addItem","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","todolist","setTasksAC","data","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","thunk","removeTaskAC","removeTaskTC","resultCode","item","messages","length","addTaskTC","changeStatus","newTitle","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","Alert","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","sx","width","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAyDYA,EAMAC,E,iCCjDGC,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,iHDDRQ,E,OAAWC,EAAMC,OAAN,aACbC,QAAS,iDAPI,CACbC,iBAAiB,EACjBC,QAAS,CACL,UAAW,2CASNC,EAAe,WAGpB,OADgBN,EAASO,IAAoB,eAFxCD,EAAe,SAKTE,GAEX,OADgBR,EAASS,KAA2C,aAAc,CAACD,MAAOA,KANrFF,EAAe,SASTI,GAEX,OADgBV,EAASW,OAAT,qBAA4CD,KAVvDJ,EAAe,SAaTI,EAAYF,GAEvB,OADgBR,EAASY,IAAT,qBAAyCF,GAAM,CAACF,MAAOA,KAdlEF,EAAe,SAiBfO,GACL,OAAOb,EAASO,IAAT,qBAA6CM,EAA7C,YAlBFP,EAAe,SAoBbO,EAAoBC,GAC3B,OAAOd,EAASW,OAAT,qBAA4CE,EAA5C,kBAAgEC,KArBlER,EAAe,SAuBbO,EAAoBE,GAC3B,OAAOf,EAASS,KAAT,qBAA6DI,EAA7D,UAAiF,CAACL,MAAOO,KAxB3FT,EAAe,SA0BbO,EAAoBC,EAAgBE,GAC3C,OAAOhB,EAASY,IAAT,qBAAmDC,EAAnD,kBAAuEC,GAAUE,K,SAgBpF3B,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KExDZ,IAAM2B,EAAmC,CACrCC,OAAQ,OACRC,MAAO,cAmBEC,EAAa,SAACD,GAAD,MAAyB,CAACE,KAAM,gBAAiBF,UAC9DG,EAAc,SAACJ,GAAD,MAAgC,CAACG,KAAM,iBAAkBH,WCL9ED,EAA0C,G,QClB1CA,EAA+B,GA+ExBM,EAAe,SAACT,EAAgBU,EAAwCX,GAAzD,OACxB,SAACY,EAAiCC,GAC9B,IACMC,EADQD,IACKE,MAAMf,GAAYgB,MAAK,SAAAC,GAAC,OAAIA,EAAEpB,KAAOI,KACxD,GAAKa,EAAL,CAMA,IAAMI,EAA6B,aAC/BC,SAAUL,EAAKK,SACfC,YAAaN,EAAKM,YAClBC,SAAUP,EAAKO,SACfC,UAAWR,EAAKQ,UAChB3B,MAAOmB,EAAKnB,MACZU,OAAQS,EAAKT,QACVM,GAGPlB,EAAwBO,EAAYC,EAAQiB,GACvCrC,MAAK,SAAA0C,GACF,IAAMC,EA9DM,SAACvB,EAAgBE,EAAkCH,GAAnD,MACvB,CAACQ,KAAM,cAAeL,QAAOH,aAAYC,UA6DfwB,CAAaxB,EAAQU,EAAaX,GACjDY,EAASY,WAjBbE,QAAQC,KAAK,iC,mDClFZC,EAAcC,IAAMC,MAAK,YAA4D,IAAD,IAAhDC,gBAAgD,SAAhCC,EAAgC,EAAhCA,QAC7DN,QAAQO,IAAI,sBADiF,MAGrEC,mBAAS,IAH4D,mBAGxFvC,EAHwF,KAGjFwC,EAHiF,OAIrED,mBAAwB,MAJ6C,mBAIxF5B,EAJwF,KAIjF8B,EAJiF,KAMvFC,EAAiB,WACE,KAAjB1C,EAAM2C,QACNN,EAAQrC,GACRwC,EAAS,KAETC,EAAS,sBAiBjB,OAAO,gCACH,cAACG,EAAA,EAAD,CAAWC,QAAQ,WACRT,SAAUA,EACVzB,QAASA,EACTmC,MAAO9C,EACP+C,SAlBS,SAACC,GACrBR,EAASQ,EAAEC,cAAcH,QAkBdI,WAfW,SAACF,GACT,OAAVrC,GACA8B,EAAS,MAEM,KAAfO,EAAEG,UACFT,KAWOU,MAAM,QACNC,WAAY1C,IAEvB,cAAC2C,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAASd,EAAgBN,SAAUA,EAA/D,SACI,cAACqB,EAAA,EAAD,Y,SCxCCC,EAAexB,IAAMC,MAAK,SAAUwB,GAC7C5B,QAAQO,IAAI,uBAD+D,MAE7CC,oBAAS,GAFoC,mBAEtEqB,EAFsE,KAE5DC,EAF4D,OAGnDtB,mBAASoB,EAAMb,OAHoC,mBAGtE9C,EAHsE,KAG/DwC,EAH+D,KAiB3E,OAAOoB,EACE,cAAChB,EAAA,EAAD,CAAWE,MAAO9C,EAAO+C,SALd,SAACC,GACjBR,EAASQ,EAAEC,cAAcH,QAI4BgB,WAAS,EAACC,OAT1C,WACrBF,GAAY,GACZF,EAAMZ,SAAS/C,MAQb,sBAAMgE,cAda,WACrBH,GAAY,GACZrB,EAASmB,EAAMb,QAYb,SAAwCa,EAAMb,W,kBCd3CmB,EAAO/B,IAAMC,MAAK,SAACwB,GAC5B,IAAMO,EAAiBC,uBAAY,kBAAMR,EAAMS,WAAWT,EAAMxC,KAAKjB,GAAIyD,EAAMtD,cAAa,CAACsD,EAAMxC,KAAKjB,GAAIyD,EAAMtD,aAE5GgE,EAAkBF,uBAAY,SAACnB,GACjC,IAAIsB,EAAiBtB,EAAEC,cAAcsB,QACrCZ,EAAMa,iBAAiBb,EAAMxC,KAAKjB,GAAIoE,EAAiBzF,EAAa4F,UAAY5F,EAAa6F,IAAKf,EAAMtD,cACzG,CAACsD,EAAMxC,KAAKjB,GAAIyD,EAAMtD,aAEnBsE,EAAuBR,uBAAY,SAACS,GACtCjB,EAAMkB,gBAAgBlB,EAAMxC,KAAKjB,GAAI0E,EAAUjB,EAAMtD,cACtD,CAACsD,EAAMxC,KAAKjB,GAAIyD,EAAMtD,aAEzB,OAAO,sBAAyByE,UAAWnB,EAAMxC,KAAKT,SAAW7B,EAAa4F,UAAY,UAAY,GAA/F,UACH,cAACM,EAAA,EAAD,CACIR,QAASZ,EAAMxC,KAAKT,SAAW7B,EAAa4F,UAC5ClB,MAAM,UACNR,SAAUsB,IAGd,cAACX,EAAD,CAAcZ,MAAOa,EAAMxC,KAAKnB,MAAO+C,SAAU4B,IACjD,cAACrB,EAAA,EAAD,CAAYE,QAASU,EAArB,SACI,cAACc,EAAA,EAAD,QATSrB,EAAMxC,KAAKjB,OCDnB+E,EAAW/C,IAAMC,MAAK,YAA6C,IAAD,IAAjC+C,YAAiC,SAAnBvB,EAAmB,wBAC3E5B,QAAQO,IAAI,mBAEZ,IAAMrB,EAAWkE,cACjBC,qBAAU,WJuBc,IAAC/E,EItBlB6E,GACCjE,GJqBiBZ,EIrBKsD,EAAM0B,SAASnF,GJqBG,SAACe,GACjDA,EAASH,EAAY,YACrBhB,EAAsBO,GACjBnB,MAAK,SAAC0C,GACHX,EARc,SAACG,EAAwBf,GAAzB,MACrB,CAACQ,KAAM,YAAaO,QAAOf,cAOXiF,CAAW1D,EAAI2D,KAAKC,MAAOnF,IACpCY,EAASH,EAAY,sBIxB1B,IAEH,IAAM2E,EAAUtB,uBAAY,SAACnE,GACzB2D,EAAM8B,QAAQzF,EAAO2D,EAAM0B,SAASnF,MACrC,CAACyD,EAAM8B,QAAS9B,EAAM0B,SAASnF,KAK5BwF,EAAsBvB,uBAAY,SAACnE,GACrC2D,EAAM+B,oBAAoB/B,EAAM0B,SAASnF,GAAIF,KAC9C,CAAC2D,EAAM0B,SAASnF,GAAIyD,EAAM+B,sBAEvBC,EAAoBxB,uBAAY,kBAAMR,EAAMiC,aAAa,MAAOjC,EAAM0B,SAASnF,MAAK,CAACyD,EAAM0B,SAASnF,GAAIyD,EAAMiC,eAC9GC,EAAuB1B,uBAAY,kBAAMR,EAAMiC,aAAa,SAAUjC,EAAM0B,SAASnF,MAAK,CAACyD,EAAM0B,SAASnF,GAAIyD,EAAMiC,eACpHE,EAA0B3B,uBAAY,kBAAMR,EAAMiC,aAAa,YAAajC,EAAM0B,SAASnF,MAAK,CAACyD,EAAM0B,SAASnF,GAAIyD,EAAMiC,eAG5HG,EAAmBpC,EAAMvC,MAS7B,MAP8B,WAA1BuC,EAAM0B,SAASW,SACfD,EAAmBpC,EAAMvC,MAAM4E,QAAO,SAAA1E,GAAC,OAAIA,EAAEZ,SAAW7B,EAAa6F,QAE3C,cAA1Bf,EAAM0B,SAASW,SACfD,EAAmBpC,EAAMvC,MAAM4E,QAAO,SAAA1E,GAAC,OAAIA,EAAEZ,SAAW7B,EAAa4F,cAGlE,gCACH,+BAAI,cAACf,EAAD,CAAcZ,MAAOa,EAAM0B,SAASrF,MAAO+C,SAAU2C,IACrD,cAACpC,EAAA,EAAD,CAAYE,QAvBG,WACnBG,EAAMsC,eAAetC,EAAM0B,SAASnF,KAsBKkC,SAA0C,YAAhCuB,EAAM0B,SAASa,aAA9D,SACI,cAAClB,EAAA,EAAD,SAGR,cAAC/C,EAAD,CAAaI,QAASoD,IACtB,8BAEQM,EAAiBI,KAAI,SAAA7E,GAAC,OAAI,cAAC2C,EAAD,CAAiB9C,KAAMG,EAAGjB,WAAYsD,EAAM0B,SAASnF,GAC/CkE,WAAYT,EAAMS,WAClBS,gBAAiBlB,EAAMkB,gBACvBL,iBAAkBb,EAAMa,kBAHnBlD,EAAEpB,SAO/C,sBAAKkG,MAAO,CAACC,WAAY,QAAzB,UACI,cAACC,EAAA,EAAD,CAAQzD,QAAmC,QAA1Bc,EAAM0B,SAASW,OAAmB,WAAa,OACxDxC,QAASmC,EACTpC,MAAO,UAFf,iBAKA,cAAC+C,EAAA,EAAD,CAAQzD,QAAmC,WAA1Bc,EAAM0B,SAASW,OAAsB,WAAa,OAC3DxC,QAASqC,EACTtC,MAAO,UAFf,oBAIA,cAAC+C,EAAA,EAAD,CAAQzD,QAAmC,cAA1Bc,EAAM0B,SAASW,OAAyB,WAAa,OAC9DxC,QAASsC,EACTvC,MAAO,YAFf,gCC/DCgD,EAAkD,SAAC,GAAkB,IAAD,IAAhBrB,YAAgB,SACvEsB,EAAYC,aAAyD,SAAAC,GAAK,OAAIA,EAAMF,aACpFpF,EAAQqF,aAA8C,SAAAC,GAAK,OAAIA,EAAMtF,SACrEH,EAAWkE,cAEjBC,qBAAU,WACN,IAAIF,EAAM,CACN,IAAMyB,ENsCP,SAAC1F,GACJA,EAASH,EAAY,YACrBhB,IACKZ,MAAK,SAAC0C,GACHX,EARmD,CAACJ,KAAM,gBAAiB2F,UAQnD5E,EAAI2D,OAC5BtE,EAASH,EAAY,kBM1CzBG,EAAS0F,MAEd,IAEH,IAAMvC,EAAaD,uBAAY,SAAUjE,EAAYG,GACjD,IAAMsG,ELwBc,SAACrG,EAAgBD,GAAjB,OAAwC,SAACY,GACjEnB,EAAwBO,EAAYC,GAC/BpB,MAAK,SAAA0C,GACF,IAAMC,EArBU,SAACvB,EAAgBD,GAAjB,MACvB,CAACQ,KAAM,cAAeP,SAAQD,cAoBRuG,CAAatG,EAAQD,GACpCY,EAASY,OK5BCgF,CAAa3G,EAAIG,GAC/BY,EAAS0F,KACV,IAEGlB,EAAUtB,uBAAY,SAAUnE,EAAeK,GACjD,IAAMsG,EL0BW,SAAC3G,EAAeK,GAAhB,OAAuC,SAACY,GAC7DA,EAASH,EAAY,YACrBhB,EAAwBO,EAAYL,GAC/Bd,MAAK,SAAA0C,GACF,GAA4B,IAAxBA,EAAI2D,KAAKuB,WAAkB,CAC3B,IACMjF,EA5BjB,CAAChB,KAAM,WAAYM,KA2BKS,EAAI2D,KAAKA,KAAKwB,MAE3B9F,EAASY,GACTZ,EAASH,EAAY,mBAEjBc,EAAI2D,KAAKyB,SAASC,OAClBhG,EAASL,EAAWgB,EAAI2D,KAAKyB,SAAS,KAEtC/F,EAASL,EAAW,wBAExBK,EAASH,EAAY,eKzCfoG,CAAUlH,EAAOK,GAC/BY,EAAS0F,KACV,IAEGQ,EAAehD,uBAAY,SAAUjE,EAAYQ,EAAsBL,GACzE,IAAMsG,EAAQ5F,EAAab,EAAI,CAACQ,UAASL,GACzCY,EAAS0F,KACV,IAEG9B,EAAkBV,uBAAY,SAAUjE,EAAYkH,EAAkB/G,GACxE,IAAMsG,EAAQ5F,EAAab,EAAI,CAACF,MAAOoH,GAAW/G,GAClDY,EAAS0F,KACV,IAEGf,EAAezB,uBAAY,SAAUrB,EAAyBzC,GAChE,IAAMwB,ENFmE,CAC7EhB,KAAM,yBACNX,GMA0CG,ENC1C2F,OMDsDlD,GAClD7B,EAASY,KACV,IAEGoE,EAAiB9B,uBAAY,SAAUjE,GACzC,INgByBG,EMhBnBsG,GNgBmBtG,EMhBMH,ENiB5B,SAACe,GACJnB,EAA4BO,GACvBnB,MAAK,SAAC0C,GACHX,EAlCiC,CAACJ,KAAM,kBAAmBX,GAkCjCG,SMnBlCY,EAAS0F,KACV,IAEGjB,EAAsBvB,uBAAY,SAAUjE,EAAYF,GAC1D,IAAM2G,EN6BuB,SAACzG,EAAYF,GAC9C,OAAO,SAACiB,GACJnB,EAA4BI,EAAIF,GAC3Bd,MAAK,SAAC0C,GACHX,EAlDqB,SAACf,EAAYF,GAAb,MAAgC,CACjEa,KAAM,wBACNX,KACAF,SA+CqBqH,CAAsBnH,EAAIF,QMjC7BsH,CAAsBpH,EAAIF,GACxCiB,EAAS0F,KACV,IAEGY,EAAcpD,uBAAY,SAACnE,GAC7B,IAAM2G,ENce,SAAC3G,GAC1B,OAAO,SAACiB,GACJA,EAASH,EAAY,YACrBhB,EAA4BE,GACvBd,MAAK,SAAC0C,GACHX,EA1C0C,CAACJ,KAAM,eAAgBwE,SA0C1CzD,EAAI2D,KAAKA,KAAKwB,OACrC9F,EAASH,EAAY,kBMpBf0G,CAAcxH,GAC5BiB,EAAS0F,KACV,CAAC1F,IAGJ,OAAO,qCACH,cAACwG,EAAA,EAAD,CAAMC,WAAS,EAACtB,MAAO,CAACuB,QAAS,QAAjC,SACI,cAAC1F,EAAD,CAAaI,QAASkF,MAE1B,cAACE,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAzB,SAEQpB,EAAUL,KAAI,SAAA0B,GACV,IAAIC,EAAmB1G,EAAMyG,EAAG3H,IAEhC,OAAO,cAACuH,EAAA,EAAD,CAAMV,MAAI,EAAV,SACH,cAACgB,EAAA,EAAD,CAAO3B,MAAO,CAACuB,QAAS,QAAxB,SACI,cAAC1C,EAAD,CACII,SAAUwC,EACVzG,MAAO0G,EACP1D,WAAYA,EACZwB,aAAcA,EACdH,QAASA,EACTjB,iBAAkB2C,EAClBlB,eAAgBA,EAChBpB,gBAAiBA,EACjBa,oBAAqBA,EACrBR,KAAMA,OAZK2C,EAAG3H,a,kBC3ExC8H,GAAQ9F,cAA6C,SACvDyB,EACAsE,GAEA,OAAO,cAAC,IAAD,aAAUC,UAAW,EAAGD,IAAKA,EAAKpF,QAAQ,UAAac,OAG3D,SAASwE,KAEZ,IAAMxH,EAAQ8F,aAA6C,SAAAC,GAAK,OAAIA,EAAM0B,IAAIzH,SACxEM,EAAWkE,cAEXkD,EAAc,SAACC,EAAsCC,GACxC,cAAXA,GAGJtH,EAASL,EAAW,QAGlB4H,EAAmB,OAAV7H,EAEf,OACI,cAAC8H,EAAA,EAAD,CAAUC,KAAMF,EAAQG,iBAAkB,IAAMC,QAASP,EAAzD,SACI,cAAC,GAAD,CAAOO,QAASP,EAAaQ,SAAS,QAAQC,GAAI,CAACC,MAAO,QAA1D,SACKpI,MCnBjB,IAwBeqI,GAxBe,SAAC,GAAmB,EAAlB9D,KAAmB,IAC7CxE,EAAS+F,aAAiD,SAAAC,GAAK,OAAIA,EAAM0B,IAAI1H,UAC/E,OACI,sBAAKoE,UAAU,MAAf,UACI,cAACqD,GAAD,IACA,eAACc,EAAA,EAAD,CAAQC,SAAS,SAAjB,UACI,eAACC,EAAA,EAAD,WACI,cAAC7F,EAAA,EAAD,CAAY8F,KAAK,QAAQ7F,MAAM,UAAU8F,aAAW,OAApD,SACI,cAACC,EAAA,EAAD,MAEJ,cAACC,EAAA,EAAD,CAAY1G,QAAQ,KAApB,kBAGA,cAACyD,EAAA,EAAD,CAAQ/C,MAAM,UAAd,sBAEQ,YAAX7C,GAAwB,cAAC8I,EAAA,EAAD,OAE7B,cAACC,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,cAAC,EAAD,U,mBCxBVC,GAAcC,aAAgB,CAChCxI,MRDwB,WAAgF,IAA/EsF,EAA8E,uDAAtDjG,EAAcoB,EAAwC,uCACvG,OAAQA,EAAOhB,MACX,IAAK,cACD,OAAO,2BAAI6F,GAAX,kBAAmB7E,EAAOxB,WAAaqG,EAAM7E,EAAOxB,YAAY2F,QAAO,SAAA1E,GAAC,OAAIA,EAAEpB,KAAO2B,EAAOvB,YAChG,IAAK,WACD,OAAO,2BAAIoG,GAAX,kBAAmB7E,EAAOV,KAAK0I,WAA/B,CAA6ChI,EAAOV,MAApD,mBAA6DuF,EAAM7E,EAAOV,KAAK0I,gBACnF,IAAK,cACD,OAAO,2BACAnD,GADP,kBAEK7E,EAAOxB,WAAaqG,EAAM7E,EAAOxB,YAC7B8F,KAAI,SAAA7E,GAAC,OAAIA,EAAEpB,KAAO2B,EAAOvB,OAAhB,2BAA6BgB,GAAMO,EAAOrB,OAASc,OAEzE,IAAK,eACD,OAAO,2BAAIoF,GAAX,kBAAmB7E,EAAOwD,SAASnF,GAAK,KAC5C,IAAK,kBACD,IAAM4J,EAAS,eAAOpD,GAEtB,cADOoD,EAAUjI,EAAO3B,IACjB4J,EACX,IAAK,gBACD,IAAMA,EAAS,eAAOpD,GAItB,OAHA7E,EAAO2E,UAAUuD,SAAQ,SAAAlC,GACrBiC,EAAUjC,EAAG3H,IAAM,MAEhB4J,EAEX,IAAK,YACD,OAAO,2BAAIpD,GAAX,kBAAmB7E,EAAOxB,WAAawB,EAAOT,QAClD,QACI,OAAOsF,IQ1BfF,UTgB4B,WAAsG,IAArGE,EAAoG,uDAAjEjG,EAAcoB,EAAmD,uCACjI,OAAQA,EAAOhB,MACX,IAAK,kBACD,OAAO6F,EAAMV,QAAO,SAAA6B,GAAE,OAAIA,EAAG3H,KAAO2B,EAAO3B,MAC/C,IAAK,eACD,MAAM,CAAN,2BAAY2B,EAAOwD,UAAnB,IAA6BW,OAAQ,MAAOE,aAAc,UAA1D,mBAAsEQ,IAC1E,IAAK,wBACD,OAAOA,EAAMP,KAAI,SAAA0B,GAAE,OAAIA,EAAG3H,KAAO2B,EAAO3B,GAAjB,2BAA0B2H,GAA1B,IAA8B7H,MAAO6B,EAAO7B,QAAS6H,KAChF,IAAK,yBACD,OAAOnB,EAAMP,KAAI,SAAA0B,GAAE,OAAIA,EAAG3H,KAAO2B,EAAO3B,GAAjB,2BAA0B2H,GAA1B,IAA8B7B,OAAQnE,EAAOmE,OAAQE,aAAc,SAAU2B,KACxG,IAAK,gCACD,OAAOnB,EAAMP,KAAI,SAAA0B,GAAE,OAAIA,EAAG3H,KAAK2B,EAAO3B,GAAf,2BAAwB2H,GAAxB,IAA4B3B,aAAcrE,EAAOnB,SAAUmH,KACtF,IAAK,gBACD,OAAOhG,EAAO2E,UAAUL,KAAI,SAAA0B,GAAE,kCAASA,GAAT,IAAa7B,OAAQ,MAAOE,aAAc,YAC5E,QACI,OAAOQ,IS9Bf0B,IVMsB,WAAwF,IAAvF1B,EAAsF,uDAA5DjG,EAAcoB,EAA8C,uCAC7G,OAAQA,EAAOhB,MACX,IAAK,iBACD,OAAO,2BAAI6F,GAAX,IAAkBhG,OAAQmB,EAAOnB,SACrC,IAAK,gBACD,OAAO,2BAAIgG,GAAX,IAAkB/F,MAAOkB,EAAOlB,QACpC,QACI,OAAO,eAAI+F,OUVVsD,GAAQC,aAAYN,GAAaO,aAAgBC,OAM9DC,OAAOJ,MAAQA,GCZfK,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUP,MAAOA,GAAjB,SACI,cAAC,GAAD,QAGRQ,SAASC,eAAe,SAM5B1L,M","file":"static/js/main.b314997e.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'b00b044a-fabf-40f0-8522-d4dd85a812f0'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export type RequestStatusType =  'idle'|'loading'|'succeeded'|'failed'\r\nexport type AppInitialStateType = {\r\n    status: RequestStatusType\r\n    error: string|null\r\n}\r\n\r\n\r\nconst initialState: AppInitialStateType ={\r\n    status: 'idle',\r\n    error: \"Some erorr\"\r\n}\r\n\r\nexport type SetErrorAT = ReturnType<typeof setErrorAC>\r\nexport type SetStatusAT = ReturnType<typeof setStatusAC>\r\ntype AppActionType = SetErrorAT|SetStatusAT\r\n\r\n\r\nexport const appReducer = (state:AppInitialStateType=initialState, action: AppActionType):AppInitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const setErrorAC = (error: string|null) => ({type: \"APP/SET-ERROR\", error} as const)\r\nexport const setStatusAC = (status: RequestStatusType) => ({type: \"APP/SET-STATUS\", status} as const)","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setStatusAC, SetStatusAT} from \"../../app/app-reducer\";\r\n\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\ntype ThunkDispatchType = Dispatch<ActionsType | SetStatusAT>\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter, entityStatus: 'idle'} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id===action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id,\r\n    status\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatchType) => {\r\n        dispatch(setStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatchType) => {\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatchType) => {\r\n        dispatch(setStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: ThunkDispatchType) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setErrorAC, SetErrorAT, setStatusAC, SetStatusAT} from \"../../app/app-reducer\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType|SetStatusAT>) => {\r\n    dispatch(setStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(setTasksAC(res.data.items, todolistId))\r\n            dispatch(setStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType|SetErrorAT|SetStatusAT>) => {\r\n    dispatch(setStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setStatusAC('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setErrorAC(res.data.messages[0]));\r\n                } else {\r\n                    dispatch(setErrorAC(\"Some error occcured\"))\r\n                }\r\n                dispatch(setStatusAC('failed'))\r\n            }\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                dispatch(action)\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n\r\n","import React, {ChangeEvent, FC, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({disabled=false, addItem}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler ();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo=false,...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if(demo) {\r\n            dispatch(fetchTasksTC(props.todolist.id))\r\n        }\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\n\r\ntype TodolistsListPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<TodolistsListPropsType> = ({demo=false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if(!demo) {\r\n            const thunk = fetchTodolistsTC()\r\n            dispatch(thunk)\r\n        }\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import * as React from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport Button from '@mui/material/Button';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {setErrorAC} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    /*const [open, setOpen] = React.useState(false);*/\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setErrorAC(null))\r\n    };\r\n\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n    );\r\n}\r\n","import React, {FC} from 'react'\r\nimport './App.css'\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {RequestStatusType} from \"./app-reducer\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\ntype AppPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nconst App: FC<AppPropsType> = ({demo = false}) => {\r\nconst status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodolistsList/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}