{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddItemForm","props","useState","taskTitle","setTaskTitle","error","setError","TextField","value","variant","helperText","label","onChange","e","currentTarget","onKeyPress","key","trim","addItem","IconButton","color","onClick","ControlPoint","EditableSpan","editMode","setEditMode","title","setTitle","onBlur","autoFocus","onDoubleClick","Todolist","newTitle","changeTodolistTitle","id","removeTodolist","Delete","addTask","tasks","map","t","Checkbox","checked","isDone","changeTaskStatus","newValue","changeTaskTitle","removeTask","Button","filter","changeFilter","App","todolistId1","v1","todolistId2","todolists","setTodolists","setTasks","todolistId","newTasks","newTask","tasks_","changeStatus","taskId","task","find","todolist","tl","filteredTodolist","className","AppBar","position","Toolbar","edge","aria-label","MenuItem","Typography","Container","fixed","Grid","container","style","padding","spacing","tasksForTodolist","item","Paper","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e00345b0.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\r\nimport {ControlPoint} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType ={\r\n    addItem: (title: string) => void\r\n}\r\n\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    const [taskTitle, setTaskTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeypressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        //setError(null);\r\n        if (e.key === \"Enter\") {\r\n            if (taskTitle.trim() !== \"\") {\r\n                props.addItem(taskTitle.trim(), )\r\n                setTaskTitle(\"\")\r\n            } else {\r\n                setError(\"Title is required\")\r\n            }\r\n        }\r\n    }\r\n\r\n    const addItemHandler = () => {\r\n        if (taskTitle.trim() !== \"\") {\r\n            props.addItem(taskTitle.trim())\r\n            setTaskTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n    return <div>\r\n        <TextField\r\n            error={!!error}\r\n            value={taskTitle}\r\n            variant={'outlined'}\r\n            helperText={error}\r\n            label={'type value'}\r\n            onChange={onNewTitleChangeHandler}\r\n            onKeyPress={onKeypressHandler}\r\n        />\r\n        <IconButton\r\n                color={'primary'}\r\n                onClick={addItemHandler}><ControlPoint/></IconButton>\r\n    </div>\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (value: string) => void\r\n}\r\n\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.title)\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n    props.onChange(title);\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode} autoFocus/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {CheckBox, Delete} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    filter: FilterValuesType\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todolistId: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id)\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id)\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id)\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id);\r\n    }\r\n\r\n    const changeTodolistTitle = (newTitle: string) => {\r\n        props.changeTodolistTitle(props.id, newTitle)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <h3><EditableSpan title={props.title} onChange={changeTodolistTitle}/>\r\n                <IconButton onClick={removeTodolist}>\r\n                    <Delete/>\r\n                </IconButton>\r\n                <AddItemForm addItem={addTask}/>\r\n\r\n            </h3>\r\n\r\n            <div>\r\n                {\r\n                    props.tasks.map(t => {\r\n                        const onRemoveHandler = () => {\r\n                            props.removeTask(t.id, props.id)\r\n                        }\r\n                        const onChangeCheckboxHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            props.changeTaskStatus(t.id, e.currentTarget.checked, props.id);\r\n                        }\r\n                        const onChangeTitleHandler = (newValue: string) => {\r\n                            props.changeTaskTitle(t.id, newValue, props.id);\r\n                        }\r\n\r\n                        return <div /*className={t.isDone ? \"is-done\" : \"\"} key={t.id}*/>\r\n                            <Checkbox\r\n                                   checked={t.isDone}\r\n                                   onChange={onChangeCheckboxHandler}\r\n                            />\r\n                            <EditableSpan title={t.title} onChange={onChangeTitleHandler}/>\r\n                            <IconButton onClick={onRemoveHandler}><Delete/></IconButton>\r\n                        </div>\r\n                    })\r\n                }\r\n            </div>\r\n\r\n            <div>\r\n                <Button variant={props.filter === \"all\" ?'contained'  : \"text\" }\r\n                        onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button color={'primary'}\r\n                        variant={props.filter === \"active\" ? \"contained\" : \"text\"}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button color={'secondary'}\r\n                        variant={props.filter === \"completed\" ? \"contained\" : \"text\"}\r\n                        onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport {TaskType, Todolist} from \"./Todolist\";\nimport {v1} from 'uuid';\nimport {AddItemForm} from \"./AddItemForm\";\nimport {AppBar, Button, Container, Grid, IconButton, MenuItem, Paper, Toolbar, Typography} from \"@material-ui/core\";\n\n\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\"\ntype TodolistType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n}\n\ntype TaskStateType = {\n    [key: string]: Array<TaskType>\n}\n\nfunction App() {\n\n    let todolistId1 = v1();\n    let todolistId2 = v1();\n\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\n    ]);\n\n    let [tasks, setTasks] = useState<TaskStateType>({\n        [todolistId1]: [\n            {id: v1(), title: \"CSS\", isDone: true},\n            {id: v1(), title: \"HTML\", isDone: true},\n            {id: v1(), title: \"React\", isDone: false},\n            {id: v1(), title: \"Redux\", isDone: false},\n        ],\n        [todolistId2]: [\n            {id: v1(), title: \"Milk\", isDone: true},\n            {id: v1(), title: \"Orange\", isDone: false},\n            {id: v1(), title: \"Cheese\", isDone: true},\n        ]\n    })\n\n    function removeTask(id: string, todolistId: string) {\n        let tasks_ = tasks[todolistId]\n        let newTasks = tasks_.filter(t => t.id !== id);\n        tasks[todolistId] = newTasks;\n        setTasks({...tasks});\n    }\n\n    function addTask(title: string, todolistId: string) {\n        const newTask = {id: v1(), title: title, isDone: false};\n        let tasks_ = tasks[todolistId];\n        let newTasks = [newTask, ...tasks_]\n        tasks[todolistId] = newTasks;\n        setTasks({...tasks});\n    }\n\n    function changeStatus(taskId: string, isDone: boolean, todolistId: string) {\n        let tasks_ = tasks[todolistId]\n        let task = tasks_.find(t => t.id === taskId) //нашли кликнутую таску\n        if (task) {\n            task.isDone = isDone;\n        }\n        setTasks({...tasks});\n    }\n\n    function changeFilter(value: FilterValuesType, todolistId: string) {\n        let todolist = todolists.find(tl => tl.id === todolistId)\n        if (todolist) {             //проверка есть ли todolist с таким ID\n            todolist.filter = value;\n            setTodolists([...todolists])\n\n        }\n    }\n\n    let removeTodolist = (todolistId: string) => {\n        let filteredTodolist = todolists.filter(tl => tl.id !== todolistId)\n        setTodolists(filteredTodolist);\n        delete tasks[todolistId]; //удаляются таски удалённого todolist\n        setTasks({...tasks}); //удаляются таски удалённого todolist из стейта\n    }\n\n    function addTodolist(title: string) {\n\n        const todolistId = v1()\n        const todolist: TodolistType = {\n            id: todolistId, title, filter: \"all\"\n        };\n        setTodolists([todolist, ...todolists]);\n        setTasks({...tasks, [todolistId]: []})\n    }\n\n    function changeTaskTitle(taskId: string, newTitle: string, todolistId: string) {\n        debugger\n        let tasks_ = tasks[todolistId]\n        let task = tasks_.find(t => t.id === taskId) //нашли кликнутую таску\n        if (task) {\n            task.title = newTitle;\n        }\n        setTasks({...tasks});\n    }\n\n    function changeTodolistTitle(id: string, newTitle: string) {\n        const todolist = todolists.find(tl => tl.id === id);\n        if (todolist) {\n            todolist.title = newTitle;\n            setTodolists([...todolists])\n        }\n    }\n\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <MenuItem/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        News\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container style={{padding:\"20px\"}}>\n                    <AddItemForm addItem={addTodolist}/>\n                </Grid>\n                <Grid container spacing={3}>\n                    {\n                        todolists.map((tl) => {\n                            let tasksForTodolist = tasks[tl.id];\n                            if (tl.filter === \"completed\") {\n                                tasksForTodolist = tasksForTodolist.filter(t => t.isDone === true)\n                            }\n                            if (tl.filter === \"active\") {\n                                tasksForTodolist = tasksForTodolist.filter(t => t.isDone === false)\n                            }\n\n                            return <Grid item>\n                                <Paper style={{padding:\"10px\"}}>\n                                <Todolist\n                                    key={tl.id}\n                                    id={tl.id}\n                                    title={tl.title}\n                                    tasks={tasksForTodolist}\n                                    removeTask={removeTask}\n                                    changeFilter={changeFilter}\n                                    addTask={addTask}\n                                    changeTaskStatus={changeStatus}\n                                    filter={tl.filter}\n                                    removeTodolist={removeTodolist}\n                                    changeTaskTitle={changeTaskTitle}\n                                    changeTodolistTitle={changeTodolistTitle}\n                                />\n                                </Paper>\n                            </Grid>\n                        })\n                    }\n                </Grid>\n            </Container>\n\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App/>,\ndocument.getElementById('root')\n)\n;\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}